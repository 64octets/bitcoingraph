#!/usr/bin/env python

import argparse
import sys

import logging
import logging.handlers
logger = logging.getLogger("bcgraph-generate")

import bitcoingraph as bcgraph
from bitcoingraph import BitcoingraphException

from bitcoingraph.graph import EntityGraph


DEFAULT_SERVICE = 'localhost:8332'


def progress(progress=0):
    progress = int(progress * 100)
    sys.stdout.write("\rProgress: {0}%".format(progress))
    sys.stdout.flush()


def setup_logger(args):

    if args.logging:
        formatter = logging.Formatter('%(levelname)s - %(asctime)s - %(name)s - %(message)s')

        # Set loglevel
        numeric_level = getattr(logging, args.logging.upper(), None)
        if not isinstance(numeric_level, int):
            logger.error("Invalid log level: {}, defaulting to 'DEBUG'".format(args.loglevel,))
            numeric_level = getattr(logging, "DEBUG", None)

        logger.setLevel(level=numeric_level)

        if args.logfile:
            rf = logging.handlers.RotatingFileHandler(args.logfile,
                                                      maxBytes=104857600,
                                                      backupCount=10)
            rf.setLevel(numeric_level)
            rf.setFormatter(formatter)
            logger.addHandler(rf)
        else:
            # create stdout stream handler
            ch = logging.StreamHandler()
            ch.setLevel(numeric_level)
            ch.setFormatter(formatter)
            logger.addHandler(ch)
        logger.debug('Set up logger for loglevel: {}'.format(numeric_level))
    return logger


def generate_tx_graph(args):
    logger.info("Starting transaction graph generation.")
    service_cred = args.user + ':' + args.password
    service_uri = 'http://' + service_cred + '@' + args.service + '/'
    try:
        blockchain = bcgraph.create_blockchain_proxy(service_uri)
        bcgraph.export_tx_graph(blockchain, args.startheight,
                                args.endheight, args.output_file, progress)
        logger.info("Finished transaction graph generation.")
    except BitcoingraphException as exc:
        logger.error(exc)
        sys.exit(1)


def generate_et_graph(args):
    # TODO: streamline code (should use bitcoingraph interface only)
    if (args.txgcsv):
        txgcsv = str(args.txgcsv)
        if logger: logger.info("Tx graph file {}\nStarting ...".format(txgcsv))
        else:   print("Tx graph file {}\nStarting ...".format(txgcsv))

        et_graph = EntityGraph(logger=logger)

        #try:
        if (args.etgcsv):
            etgcsv = str(args.etgcsv)
            if logger: logger.info("Entity graph output file: {}".format(etgcsv))
            else: print("Entity graph output file: {}".format(etgcsv))
            et_graph.export_to_csv(txgcsv, etgcsv)

        if (args.btcmapcsv):
            btcmapcsv = str(args.btcmapcsv)
            if logger: logger.info("Bitcoin address mapping output file: {}".format(btcmapcsv))
            else: print("Bitcoin address mapping output file: {}".format(btcmapcsv))
            if et_graph.print_btcaddr_mapping(btcmapcsv) == 1:
                et_graph._generate_from_tx_graph(txgcsv)
                et_graph.print_entity_mapping(etmapcsv)

        if (args.etmapcsv):
            etmapcsv = str(args.etmapcsv)
            if logger: logger.info("Entity mapping output file: {}".format(etmapcsv))
            else: print("Entity mapping output file: {}".format(etmapcsv))
            if et_graph.print_entity_mapping(etmapcsv) == 1:
                et_graph._generate_from_tx_graph(txgcsv)
                et_graph.print_entity_mapping(etmapcsv)
        #except:
        #    if logger: logger.error("Exception {}".format(sys.exc_info()[0]))
        #    else: print("Exception {}".format(sys.exc_info()[0]))

    else:
        if logger: logger.error("No input transaction graph csv given. Aporting")
        else:   print("No input transaction graph csv given. Aporting")

    return 0


parser = argparse.ArgumentParser(
    description="Generates graph data sets from the Bitcoin blockchain")
parser.add_argument("--log", dest='logging',
                    help="Enable logging (Default=DEBUG)")
parser.add_argument("--logfile", dest='logfile',
                    help="Write logs to logfile")

# Define subparsers for each command
subparsers = parser.add_subparsers(
    help="Bitcoin graph generation sub-command help")

# Parser for transaction graph generation
tx_graph_parser = subparsers.add_parser(
    "tx_graph",
    help="Transaction graph generation help")
tx_graph_parser.add_argument("startheight", type=int,
                             help="Start block height")
tx_graph_parser.add_argument("endheight", type=int,
                             help="End block height")
tx_graph_parser.add_argument("-s", "--service",
                             default=DEFAULT_SERVICE,
                             help="Address of Bitcoin JSON RPC Service")
tx_graph_parser.add_argument("-u", "--user", required=True,
                             help="Bitcoin Core RPC username")
tx_graph_parser.add_argument("-p", "--password", required=True,
                             help="Bitcoin Core RPC password")
tx_graph_parser.add_argument("-o", "--output_file", type=str,
                             default="tx_graph.csv",
                             help="Output file name")
tx_graph_parser.set_defaults(func=generate_tx_graph)

# Parser for entity graph generation
et_graph_parser = subparsers.add_parser(
    "et_graph",
    help="Entity graph generation help")
et_graph_parser.add_argument('-t', '--txgcsv', action='store',
                             default=None, dest='txgcsv',
                             type=str,
                             help='Transaction graph csv file')
# TODO: specific single output directory instead of multiple files
et_graph_parser.add_argument('-o', '--output',
                             action='store',
                             default=None,
                             dest='etgcsv',
                             type=str,
                             help='Entity graph output csv file')
et_graph_parser.add_argument('-e', '--etmapout',
                             action='store',
                             default=None,
                             dest='etmapcsv',
                             type=str,
                             help='Entity mapping output csv file.')
et_graph_parser.add_argument('-b', '--btcmapout',
                             action='store',
                             default=None,
                             dest='btcmapcsv',
                             type=str,
                             help='Btcaddr mapping output csv file.')
et_graph_parser.set_defaults(func=generate_et_graph)


if len(sys.argv) <= 2:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()
setup_logger(args)
args.func(args)
