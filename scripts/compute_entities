#!/usr/bin/env python

import argparse
import bisect
import csv
import os
import sys


class Address:

    counter = 0

    def __init__(self, address, assign_number=False):
        self.address = address
        self.representative = None
        self.height = 0
        if assign_number:
            self.number = Address.counter
            Address.counter += 1

    def get_representative(self):
        r = self
        while r.representative is not None:
            r = r.representative
        return r

    def set_representative(self, address):
        self.representative = address
        if self.height >= address.height:
            address.height = self.height + 1

    def __lt__(self, other):
        return self.address < other.address

    def __eq__(self, other):
        return self.address == other.address

    def __hash__(self):
        return hash(self.address)


class AddressList:

    def __init__(self):
        self.addresses = []

    def add(self, address_string):
        self.addresses.append(Address(address_string, True))

    def group(self, address_strings):
        if len(address_strings) >= 2:
            addresses = list(map(self.search, address_strings))
            representatives = {address.get_representative() for address in addresses}
            highest_representative = None
            for representative in representatives:
                if highest_representative is None or representative.height > highest_representative.height:
                    highest_representative = representative
            representatives.remove(highest_representative)
            for representative in representatives:
                representative.set_representative(highest_representative)

    def search(self, address_string):
        index = bisect.bisect_left(self.addresses, Address(address_string))
        return self.addresses[index]

    def export(self, path):
        with open(os.path.join(path, 'entities.csv'), 'w') as entity_csv_file, \
                open(os.path.join(path, 'belongs_to.csv'), 'w') as entity_rel_csv_file:
            entity_writer = csv.writer(entity_csv_file)
            entity_rel_writer = csv.writer(entity_rel_csv_file)
            entity_writer.writerow(['id:ID(Entity)'])
            entity_rel_writer.writerow([':START_ID(Address)', ':END_ID(Entity)'])
            for address in self.addresses:
                representative = address.get_representative()
                if address == representative:
                    entity_writer.writerow([representative.number])
                entity_rel_writer.writerow([address.address, representative.number])

    def print(self):
        for address in self.addresses:
            print(address.address, address.get_representative().address)


def compute_entities(input_path):
    address_list = AddressList()
    print('reading addresses')
    with open(os.path.join(input_path, 'addresses_unique.csv'), 'r') as address_file:
        address_file.readline()
        for line in address_file:
            line = line.strip()
            if line != 'COINBASE':
                address_list.add(line)
    print('reading inputs')
    input_counter = 0
    with open(os.path.join(input_path, 'inputs.csv'), 'r') as input_file:
        input_file.readline()
        input_addresses = set()
        transaction = None
        for line in input_file:
            entries = line.split(',')
            address = entries[0]
            if address != 'COINBASE':
                if transaction is None or transaction == entries[1]:
                    input_addresses.add(address)
                else:
                    address_list.group(input_addresses)
                    input_addresses = {address}
                transaction = entries[1]
            input_counter += 1
            if input_counter % 100000 == 0:
                print('processed inputs: ' + str(input_counter))
        address_list.group(input_addresses)
    print('write to file')
    address_list.export(input_path)


parser = argparse.ArgumentParser(
    description='Cumpute entities from exported block chain data')
parser.add_argument('-i', '--input_path', type=str,
                    help='Input path')
parser.set_defaults(func=compute_entities)


if len(sys.argv) <= 1:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()
args.func(args.input_path)
